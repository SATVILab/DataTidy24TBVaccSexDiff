---
title: Anonymise data
author: "Miguel Rodo"
format:
  html:
    embed-resources: true
---

```{r setup, include = FALSE}
library(tibble)
library(ggplot2)
for (x in list.files("R", full.names = TRUE)) {
  source(x)
}
```

# Sex data

Here is the spreadsheet with the sex data:

## C035_456

```{r}
data_raw_sex_c035_456 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MiguelData26032024.xlsx"
  ),
  sheet = "C035_456"
)
data_tidy_sex_c035_456 <- data_raw_sex_c035_456 |>
  janitor::clean_names() |>
  dplyr::mutate(
    sex = tolower(sex),
    ptid = tolower(ptid)
  ) |>
  dplyr::mutate(
    across(where(is.character), tolower)
  )
UtilsDataRSV::view_cols(data_tidy_sex_c035_456)
```

## ID93

```{r}
data_raw_sex_id93 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MiguelData26032024.xlsx"
  ),
  sheet = "ID93_GLA_SE "
)
data_tidy_sex_id93 <- data_raw_sex_id93 |>
  janitor::clean_names() |>
  dplyr::rename(
    sex = gender
  ) |>
  dplyr::mutate(
    across(where(is.character), tolower)
  )
UtilsDataRSV::view_cols(data_tidy_sex_id93)
```

## TB008

```{r}
data_raw_sex_tb008 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MiguelData26032024.xlsx"
  ),
  sheet = "TB008"
)
data_tidy_sex_tb008 <- data_raw_sex_tb008 |>
  janitor::clean_names() |>
  dplyr::mutate(
    across(where(is.character), tolower)
  )
UtilsDataRSV::view_cols(data_tidy_sex_tb008)
```

## TB010

```{r}
data_raw_sex_tb011 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MiguelData26032024.xlsx"
  ),
  sheet = "TB011"
)
data_tidy_sex_tb011 <- data_raw_sex_tb011 |>
  janitor::clean_names() |>
  dplyr::mutate(
    across(where(is.character), tolower)
  )
UtilsDataRSV::view_cols(data_tidy_sex_tb011)
```

## H1

```{r}
data_raw_sex_h1 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MiguelData26032024.xlsx"
  ),
  sheet = "H1"
)
data_tidy_sex_h1 <- data_raw_sex_h1 |>
  janitor::clean_names() |>
  dplyr::mutate(
    across(where(is.character), tolower)
  )
UtilsDataRSV::view_cols(data_tidy_sex_h1)
```

# ID93

```{r}
data_raw_id93 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MASTER TABLE IDRI-114 All Cohorts v.02.xlsx"
  )
)
```

```{r}
UtilsDataRSV::view_cols(
  data_raw_id93 |>
    dplyr::select(Sample:`TUBE NAME`)
  )
```

```{r}
data_tidy_id93 <- data_raw_id93
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::select(-Sample) |>
  dplyr::filter(
    COHORT %in% c(1, 3) 
  ) |>
  dplyr::select(-`$FIL`) |>
  dplyr::rename(ptid = `SAMPLE ID`) |>
  dplyr::select(-`Date of Blood Draw`) |>
  dplyr::select(-COHORT) |>
  dplyr::filter(RANDOMISATION == "ID93+GLA/SE") |>
  dplyr::rename(
    vaccine = RANDOMISATION
  ) |>
  dplyr::mutate(
    vaccine = "id93"
  ) |>
  dplyr::mutate(
    prid = "114"
  ) |>
  dplyr::rename(
    infxn = `QFT Status`
  ) |>
  dplyr::mutate(
    infxn = ifelse(
      infxn == "QFT+", "infected", "uninfected"
    )
  ) |>
  dplyr::rename(
    timepoint = `Study Day`
  ) |>
  dplyr::rename(
    stim = `TUBE NAME`
  ) |>
  dplyr::mutate(
    stim = tolower(stim)
  ) |>
  dplyr::filter(
    !stim == "pha"
  ) |>
  dplyr::select(
    vaccine, prid, ptid, infxn, timepoint, stim, everything()
  )
```

```{r}
colnames(data_tidy_id93)
```


```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::mutate(
    across(`CD8+,Count`:`CD4+/G-T-2-17-`, as.character)
  ) |>
  tidyr::pivot_longer(
    -c(vaccine:stim),
    names_to = "cyt_combn",
    values_to = "response"
  )
```

```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::mutate(
    cyt_combn_orig = cyt_combn,
    cyt_combn = tolower(cyt_combn)
  ) |>
  dplyr::filter(
    grepl("g[+-]t[+-]2[+-]17[+-]$", cyt_combn)
  ) |>
  dplyr::mutate(
    subset = ifelse(grepl("^cd4", cyt_combn), "cd4", "cd8")
  ) |>
  dplyr::mutate(
    cyt_combn = gsub("^cd4\\+/|^cd8\\+/", "", cyt_combn)
  )
```

```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::mutate(
    cyt_combn = .cyt_combn_reorder(
      cyt_combn, c("g", "2", "t", "17")
    )
  )
```

```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::mutate(response = as.numeric(response))
```

```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::select(
    vaccine:stim, subset, cyt_combn_orig, cyt_combn, response, everything()
  )
```

```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::filter(
    cyt_combn != "g-2-t-"
  ) |>
  UtilsCytoRSV::sum_over_markers(
    grp = c(
      "ptid", "prid", "vaccine", "infxn", "timepoint",
      "subset", "cyt_combn", "stim"
    ),
    cmbn = "cyt_combn",
    markers_to_sum = c("17"),
    resp = "response"
  )
```

Now we can merge with the sex data:

```{r}
print("immune response ptid")
unique(data_tidy_id93$ptid) |>
  sort()
print("sex data screen id")
unique(data_tidy_sex_id93$screen_id |>
  gsub("^931402-", "", x = _) |>
  gsub(" ss$", "", x = _)) |>
  sort()
print("sex randomisation number")
unique(
  data_tidy_sex_id93$randomisation_no |>
    gsub("^931402-", "", x = _) 
  ) |>
  sort()
print("print first part of sex randomisation number")
unique(
  data_tidy_sex_id93$randomisation_no |>
    gsub("^931402-", "", x = _) |>
    gsub("^\\d+-", "", x = _)
  ) |>
  sort()
print("print second part of sex randomisation number")
unique(
  data_tidy_sex_id93$randomisation_no |>
    gsub("^931402-", "", x = _) |>
    gsub("-\\d+$", "", x = _)
  ) |>
  sort()


```

Here are the FCS file names in the cohort 1 folder on the SATVI server:

```{r}
pid_vec_cohort_1 <- c(
  "10.IDRI-114_931402-067-10_10SEP2015_ES-A",
  "4.IDRI-114_931402-018-04_26JUN2015_ES-A",
  "11.IDRI-114_931402-195-11_14SEP2015_ES-A",
  "5.IDRI-114_931402-095-05_02JUL2015_ES-A",
  "12.IDRI-114_931402-197-12_15SEP2015_ES-A",
  "6.IDRI-114_931402-075-06_03JUL2015_ES-A",
  "1.IDRI-114_931402-028-01_08JUN2015_ES-A",
  "7.IDRI-114_931402-071-07_07JUL2015_ES-A",
  "2.IDRI-114_931402-025-02_10JUN2015_ES-A",
  "8.IDRI-114_931402-181-08_15JUL2015_ES-A",
  "3.IDRI-114_931402-030-03_11JUN2015_ES-A",
  "9.IDRI-114_931402-143-09_09SEP2015_ES-A"
)
pid_vec_cohort_3 <- c(
  "10.IDRI-114_931402-044-59_12MAY2015_ES-A",
  "2.IDRI-114_931402-069-51_05MAR2015_ES-A",
  "11.IDRI-114_931402-003-60_14MAY2015_ES-A",
  "3.IDRI-114_931402-126-52_09MAR2015_ES-A",
  "12.IDRI-114_931402-129-61_20MAY2015_ES-A",
  "4.IDRI-114_931402-175-53_10MAR2015_ES-A",
  "13.IDRI-114_931402-073-62_27MAY2015_ES-A",
  "5.IDRI-114_931402-089-54_07SEP2015_ES-A",
  "14.IDRI-114_931402-139-63_27AUG2015_ES-A",
  "6.IDRI-114_931402-172-55_12MAR2015_ES-A",
  "15.IDRI-114_931402-166-64_29MAY2015_ES-A",
  "7.IDRI-114_931402-088-56_13MAR2015_ES-A",
  "16.IDRI-114_931402-173-65_02JUN2015_ES-A2",
  "8.IDRI-114_931402-121-57_07SEP2015_ES-A",
  "17.IDRI-114_931402-157-66_31AUG2015_ES-A",
  "9.IDRI-114_931402-061-58_17MAR2015_ES-A",
  "18.IDRI-114_931402-074-67_01SEP2015_ES-A",
  "IDRI-114_51-52-53-55-56-58_30APR2015_ES-A",
  "1.IDRI-114_931402-081-50_17SEP2015_ES-A"
)
```

```{r}
# "10.IDRI-114_931402-067-10_10SEP2015_ES-A",
# extract the number after 10.IDRI-114_931402-067-
# and before the underscore (but do it generically,
# so we can apply the same call to 
# 1.IDRI-114_931402-028-01_08JUN2015_ES-A, for example)
sample_number_vec_cohort_1 <- gsub(
  "\\d+\\.IDRI-114_931402-\\d+-", "", pid_vec_cohort_1
) |>
  gsub(
    "_.*", "", x = _
  ) |>
  as.numeric()
# okay, now we want to do the same,
# except we want to extract the 931402-\\d+ 
# part, up until that dash
screen_id_vec_cohort_1 <- gsub(
  "\\d+\\.IDRI-114_", "", pid_vec_cohort_1
) |>
  gsub(
    "_.*", "", x = _
  ) |>
  gsub("-\\d+$", "", x = _)
# it matches!
data_tidy_sex_id93 |>
  dplyr::mutate(
    screen_id = gsub("\\s*ss$", "", screen_id)
  ) |>
  dplyr::filter(
    screen_id %in% screen_id_vec_cohort_1
  )
```

These match perfectly for cohort 1:
```{r}
data_tidy_sex_id93 |>
  dplyr::mutate(
    screen_id = gsub("\\s*ss$", "", screen_id)
  ) |>
  dplyr::filter(
    screen_id %in% screen_id_vec_cohort_1
  )
```

But everyone is female! So the cohort is useless.

Anyway...

```{r}
sample_number_vec_cohort_3 <- gsub(
  "\\d+\\.IDRI-114_931402-\\d+-", "", pid_vec_cohort_3
) |>
  gsub(
    "_.*", "", x = _
  ) |>
  as.numeric()
screen_id_vec_cohort_3 <- gsub(
  "\\d+\\.IDRI-114_", "", pid_vec_cohort_3
) |>
  gsub(
    "_.*", "", x = _
  ) |>
  gsub("-\\d+$", "", x = _)
```

```{r}
data_tidy_sex_id93 |>
  dplyr::mutate(
    screen_id = gsub("\\s*ss$", "", screen_id)
  ) |>
  dplyr::filter(
    screen_id %in% screen_id_vec_cohort_3
  )
```

Only ten match, however:

```{r}
data_tidy_sex_id93 |>
  dplyr::mutate(
    screen_id = gsub("\\s*ss$", "", screen_id)
  ) |>
  dplyr::filter(
    !screen_id %in% screen_id_vec_cohort_3
  )
screen_id_vec_cohort_3[
  !(screen_id_vec_cohort_3 %in%
  (data_tidy_sex_id93 |>
    dplyr::mutate(
    screen_id = gsub("\\s*ss$", "", screen_id)
  ) |>
  dplyr::pull(screen_id)))
]
```

And it's the same ten that Humphrey had earlier. So I think Humphrey is just missing the data for samples 53 to 67.

Okay, but I think now we know for sure that we can merge the sex data for the other observations in.

```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::left_join(
    data_tidy_sex_id93 |>
      dplyr::mutate(
        ptid = gsub("^931402-\\d+-", "", randomisation_no) |>
          as.numeric()
      ) |>
      dplyr::select(ptid, sex),
    by = "ptid"
  ) |>
  dplyr::select(
    vaccine, prid, ptid, sex, everything()
  )
```

Okay, now, let's sum over the stims, and subtract background:

```{r}
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::group_by(
    vaccine, prid, ptid, sex, infxn, timepoint, subset, cyt_combn
  ) |>
  dplyr::summarise(
    response_stim = sum(response[stim != "uns"]),
    response_uns = sum(response[stim == "uns"]),
    .groups = "drop"
  ) |>
  dplyr::mutate(
    response = response_stim - response_uns
  ) |>
  dplyr::select(-c(response_stim, response_uns)) |>
  dplyr::mutate(
    response = ifelse(response < 0, 0, response)
  )
```

Now we anonymise pids:

```{r}
set.seed(213)
data_tidy_id93 <- data_tidy_id93 |>
  dplyr::mutate(
    ptid = .anonymise(ptid, vaccine, prid)
  ) |>
  dplyr::filter(
    cyt_combn != "g-2-t-"
  )
```


# `02_Feb.xlsx` spreadsheet

These are the data from `02_Feb.xlsx`.
I think these data were collated by One.

```{r}
main_tbl <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "02_Feb.xlsx"
  )
)
```

These are the vaccine and protocol combinations for which we have information here:

```{r}
main_tbl |>
  dplyr::group_by(`Protocol ID`, Vaccine) |>
  dplyr::slice(1) |>
  dplyr::ungroup() |>
  dplyr::select(`Protocol ID`, Vaccine)
```

## Aeras402

This is for protocol `003` (NHREC no. 1381).

```{r}
aeras_tbl <- main_tbl |>
  dplyr::filter(`Protocol ID` == "402.003")
aeras_tbl_pid <- aeras_tbl |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup()
aeras_tbl_pid
```

There are nine here and nine in the 2019 paper, so this seems correct.


## H56

This is for protocol `402.032`.

```{r}
h56_tbl <- main_tbl |>
  dplyr::filter(`Protocol ID` == "402.032")
h56_tbl_pid <- h56_tbl |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup() |>
  dplyr::rename(
    ptid = PatientID
  )
h56_tbl_pid
```

There are only 8 subjects here, and used 27 in the 2019 paper (15 uninfected and 12 infected), so we won't save this one (as per conversation with Tom).

## M72

### GSK.010

This is for protocol `GSK.010`.

```{r}
gsk_tbl <- main_tbl |>
  dplyr::filter(`Protocol ID` == "GSK.010")
gsk_tbl_pid <- gsk_tbl |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup()
gsk_tbl_pid
```

Here are the sex data for the 010 trial:

```{r}

```

### GSK.012

This is for protocol `GSK.012`.

```{r}
gsk_tbl <- main_tbl |>
  dplyr::filter(`Protocol ID` == "GSK.012")
gsk_tbl_pid <- gsk_tbl |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup()
gsk_tbl_pid
```

## MVA85A

### TB008

This is for protocol `TB008`.

```{r}
mva_tbl <- main_tbl |>
  dplyr::filter(`Protocol ID` == "MVA.008")
mva_tbl_pid <- mva_tbl |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup()
mva_tbl_pid
```

Let's merge this with the sex data.

```{r}
data_tidy_sex_tb008$ptid |> unique() |> sort()
```

```{r}
mva_tbl_pid$PatientID |> unique() |> sort()
```

```{r}
data_tidy_sex_mva85a_tb008 <- mva_tbl_pid |>
  dplyr::rename(ptid = PatientID) |>
  dplyr::left_join(
    data_tidy_sex_tb008 |>
      dplyr::rename(ptid = pid) |>
      dplyr::mutate(
        ptid = gsub("^m01\\-", "", ptid)
      ),
    by = "ptid"
  ) |>
  dplyr::mutate(
    prid = "tb008",
    vaccine = "mva85a"
  ) |>
  dplyr::select(
    vaccine, prid, ptid, sex
  )
```

There is one entry with no sex data:

```{r}
data_tidy_sex_mva85a_tb008 |>
  dplyr::filter(!sex %in% c("male", "female"))
```

```{r}
mva_tbl_immune_tb008 <- mva_tbl |>
  dplyr::rename(
    ptid = PatientID
  ) |>
  dplyr::mutate(
    ptid = tolower(ptid)
  ) |>
  dplyr::rename(
    prid = `Protocol ID`
  ) |>
  dplyr::mutate(
    prid = "tb008"
  ) |>
  dplyr::rename(
    vaccine = Vaccine
  ) |>
  dplyr::mutate(
    vaccine = tolower(vaccine)
  ) |>
  dplyr::rename(
    infxn = Infxn
  ) |>
  dplyr::rename(
    timepoint = TimePoint
  ) |>
  dplyr::select(-starts_with("Tot")) |>
  tidyr::pivot_longer(
    -c(ptid, prid, vaccine, infxn, timepoint),
    names_to = "cyt_combn",
    values_to = "response"
  ) |>
  dplyr::mutate(
    cyt_combn = tolower(cyt_combn),
    subset = ifelse(grepl("cd4", cyt_combn), "cd4", "cd8"),
    subset = ifelse(grepl("cdpos8", cyt_combn), "cd8", subset),
    cyt_combn = gsub("^cd4|^cd8|^cdpos8", "", cyt_combn),
    cyt_combn = gsub("^pos", "", cyt_combn)
  )
mva_tbl_immune_tb008 <- mva_tbl_immune_tb008 |>
  dplyr::mutate(
    cyt_combn = .cyt_combn_reorder(
      cyt_combn, c("g", "2", "t", "17"),
      pos_ind = "pos", neg_ind = "neg"
    )
  ) |>
  dplyr::select(
    vaccine, prid, ptid, infxn, timepoint, subset, cyt_combn, response
  )
data_tidy_mva85a_tb008 <- mva_tbl_immune_tb008 |>
  dplyr::left_join(
    data_tidy_sex_mva85a_tb008 |> dplyr::select(ptid, sex),
    by = "ptid"
  ) |>
  dplyr::mutate(
    infxn = ifelse(infxn == "positive", "infected", "uninfected")
  )
# sum over 17:
data_tidy_mva85a_tb008 <- data_tidy_mva85a_tb008 |>
  UtilsCytoRSV::sum_over_markers(
    grp = c(
      "vaccine", "prid", "ptid", "infxn",
      "timepoint", "subset", "cyt_combn", "sex"
    ),
    cmbn = "cyt_combn",
    markers_to_sum = c("17"),
    resp = "response"
  )

data_tidy_mva85a_tb008 <- data_tidy_mva85a_tb008 |>
  dplyr::select(vaccine:ptid, sex, everything())

set.seed(2)
data_tidy_mva85a_tb008 <- data_tidy_mva85a_tb008 |>
  dplyr::mutate(
    ptid = .anonymise(ptid, vaccine, prid)
  ) |>
  dplyr::filter(!is.na(sex)) |>
  dplyr::filter(
    cyt_combn != "g-2-t-"
  )
```

### MVA.011

This is for protocol `TB011`.

```{r}
mva_tbl_tb011 <- main_tbl |>
  dplyr::filter(`Protocol ID` == "MVA.011")
mva_tbl_pid_tb011 <- mva_tbl_tb011 |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup()
mva_tbl_pid_tb011
```

Let's merge this with the sex data.

```{r}
data_tidy_sex_tb011$pid |> unique() |> sort()
```

```{r}
mva_tbl_pid_tb011$PatientID |> unique() |> sort()
```

Seems like the match isn't complete, but we should get something if we remove `m03-` from the sex table.

```{r}
data_tidy_sex_mva85a_tb011 <- mva_tbl_pid_tb011 |>
  dplyr::rename(ptid = PatientID) |>
  dplyr::mutate(
    ptid = gsub("^1\\.", "", ptid)
  ) |>
  dplyr::left_join(
    data_tidy_sex_tb011 |>
      dplyr::rename(ptid = pid) |>
      dplyr::mutate(
        ptid = gsub("^m03\\-", "", ptid)
      ),
    by = "ptid"
  ) |>
  dplyr::mutate(
    prid = "tb011",
    vaccine = "mva85a"
  ) |>
  dplyr::select(
    vaccine, prid, ptid, sex
  )
```

There are two entries with no pid dataL

```{r}
data_tidy_sex_mva85a_tb011 |>
  dplyr::filter(!sex %in% c("male", "female"))
```

There is no 101 or 102 (prefix aside, including with a leading zero) in the raw sex data, but there are m03-1010 and m03-1020.

Okay, now let's merge the two...

```{r}
mva_tbl_tb011_immune <- mva_tbl_tb011 |>
  dplyr::rename(
    ptid = PatientID
  ) |>
  dplyr::mutate(
    ptid = tolower(ptid)
  ) |>
  dplyr::rename(
    prid = `Protocol ID`
  ) |>
  dplyr::mutate(
    prid = "tb011"
  ) |>
  dplyr::rename(
    vaccine = Vaccine
  ) |>
  dplyr::mutate(
    vaccine = tolower(vaccine)
  ) |>
  dplyr::rename(
    infxn = Infxn
  ) |>
  dplyr::rename(
    timepoint = TimePoint
  ) |>
  dplyr::select(-starts_with("Tot")) |>
  tidyr::pivot_longer(
    -c(ptid, prid, vaccine, infxn, timepoint),
    names_to = "cyt_combn",
    values_to = "response"
  ) |>
  dplyr::mutate(
    cyt_combn = tolower(cyt_combn),
    subset = ifelse(grepl("cd4", cyt_combn), "cd4", "cd8"),
    subset = ifelse(grepl("cdpos8", cyt_combn), "cd8", subset),
    cyt_combn = gsub("^cd4|^cd8|^cdpos8", "", cyt_combn),
    cyt_combn = gsub("^pos", "", cyt_combn)
  ) |>
  dplyr::mutate(
    cyt_combn = .cyt_combn_reorder(
      cyt_combn, c("g", "2", "t", "17"),
      pos_ind = "pos", neg_ind = "neg"
    )
  ) |>
  dplyr::select(
    vaccine, prid, ptid, infxn, timepoint, subset, cyt_combn, response
  )
data_tidy_mva85a_tb011 <- mva_tbl_tb011_immune |>
  dplyr::mutate(
    ptid = gsub("^1\\.", "", ptid)
  ) |>
  dplyr::left_join(
    data_tidy_sex_mva85a_tb011 |>
      dplyr::select(ptid, sex),
    by = "ptid"
  ) |>
  dplyr::select(vaccine:ptid, sex, infxn:response) |>
  dplyr::mutate(
    infxn = ifelse(infxn == "positive", "infected", "uninfected")
  )
data_tidy_mva85a_tb011 <- data_tidy_mva85a_tb011 |>
  UtilsCytoRSV::sum_over_markers(
    grp = c(
      "vaccine", "prid", "ptid", "infxn",
      "timepoint", "subset", "cyt_combn", "sex"
    ),
    cmbn = "cyt_combn",
    markers_to_sum = c("17"),
    resp = "response"
  )
data_tidy_mva85a_tb011 <- data_tidy_mva85a_tb011 |>
  dplyr::filter(
    cyt_combn != "g-2-t-"
  )
set.seed(3214234)
data_tidy_mva85a_tb011 <- data_tidy_mva85a_tb011 |>
  dplyr::mutate(
    ptid = .anonymise(ptid, vaccine, prid)
  ) |>
  dplyr::filter(!is.na(sex))
```

## BCG

### TBRU

This is for protocol `TBRU`.

```{r}
bcg_tbl <- main_tbl |>
  dplyr::filter(`Protocol ID` == "TBRU")
bcg_tbl_pid <- bcg_tbl |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup()
bcg_tbl_pid
```

### 040

```{r}
data_raw_bcg_040 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MergedDemoImmu29042024Copy.xlsx"
  )
)
```

```{r}
data_tidy_bcg_040 <- data_raw_bcg_040 |>
  dplyr::select(
    -c(randdate, dob, age, race, school)
  ) 
```

```{r}
UtilsDataRSV::view_cols(
  data_tidy_bcg_040 |>
    dplyr::select(subjid:arm, ARM)
)
```

Okay, let's have a look at these different `arm` ones:

```{r}
data_tidy_bcg_040 |>
  dplyr::select(subjid:arm, ARM) |>
  dplyr::group_by(arm, ARM, group) |>
  dplyr::slice(1) |>
  dplyr::select(-c(subjid, sex))
```

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    sex = tolower(sex)
  ) |>
  dplyr::filter(ARM == "BCG") |>
  dplyr::select(-c(arm, ARM))
```

After filtering for the `ARM` column having `BCG`, we only have the `SAFETY AND IMMUNOGENICITY` group left:

```{r}
data_tidy_bcg_040 |>
  dplyr::select(group) |>
  dplyr::group_by(group) |>
  dplyr::slice(1)
```

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::select(-group) |>
  dplyr::mutate(
    timepoint = gsub("^D", "", timepoint) |>
      as.numeric()
  ) |>
  dplyr::rename(
    stim = Stim
  ) |>
  dplyr::mutate(
    stim = tolower(stim)
  )
```

```{r}
UtilsDataRSV::view_cols(
  data_tidy_bcg_040 |>
    dplyr::select(
      CellSubset, DataType
    )
)
```

So, we'll take the cd4 and cd8 groups.
Only background-subtracted values here. 

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::rename(
    subset = CellSubset
  ) |>
  dplyr::mutate(
    subset = tolower(subset)
  ) |>
  dplyr::filter(
    subset %in% c("cd4", "cd8")
  ) |>
  dplyr::select(-DataType)
```

Now we'll remove response-related columns we don't want.

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::select(
    -c(FisherClassification:PFS)
  )
```

Here are the remaining column names:

```{r}
colnames(data_tidy_bcg_040)
```

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::select(
    -c(Fisherpvalue:ClassificationFisher)
  )
```

Now here are the reamining column names:

```{r}
colnames(data_tidy_bcg_040) |>
  sort()
```

I see that some response columns start with `mg_`, and others not. Let's see what these look like:

```{r}
data_tidy_bcg_040 |>
  dplyr::select(
    gpIIp17_22pTp, gpII_17p22pTp, mg_1IL22nIL17nIFNgnTNFanIL2,
    mg_1IL22n1IL17nIFNgn1TNFanIL2
  )
```

The `mg_` columns seem to have many more NAs, so for now we'll go wit those.

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::select(-starts_with("mg_"))
```

Now we have these remaining:

```{r}
colnames(data_tidy_bcg_040)
```

I assume the underscore means negative and the `p` means positive.

Let's create long-form data.

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  tidyr::pivot_longer(
    -c(subjid:subset),
    names_to = "cyt_combn",
    values_to = "response"
  )
```

Let's look at the data now:

```{r}
UtilsDataRSV::view_cols(data_tidy_bcg_040)
```

Let's remove the non-BCG stims:

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::filter(stim == "bcg")
```

Let's add the extra column names  needed, rename where needed and add an `infxn` column (all negative).

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    infxn = "uninfected"
  ) |>
  dplyr::mutate(
    vaccine = "bcg",
    prid = "040"
  ) |>
  dplyr::rename(
    ptid = subjid
  ) |>
  dplyr::select(
    vaccine, prid, ptid, sex, infxn, timepoint, subset, cyt_combn, response
  )
```

```{r}
# gpIIp17p22pT_
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    cyt_combn = gsub("T_$", "T-", cyt_combn),
    cyt_combn = gsub("Tp$", "T+", cyt_combn),
    cyt_combn = gsub("p22p", "p22+", cyt_combn),
    cyt_combn = gsub("_22p", "_22+", cyt_combn),
    cyt_combn = gsub("p22_", "p22-", cyt_combn),
    cyt_combn = gsub("_22_", "_22-", cyt_combn),
    cyt_combn = gsub("p17p", "p17+", cyt_combn),
    cyt_combn = gsub("_17p", "_17+", cyt_combn),
    cyt_combn = gsub("p17_", "p17-", cyt_combn),
    cyt_combn = gsub("_17_", "_17-", cyt_combn),
    cyt_combn = gsub("pIIp", "p2+", cyt_combn),
    cyt_combn = gsub("_IIp", "_2+", cyt_combn),
    cyt_combn = gsub("pII_", "p2-", cyt_combn),
    cyt_combn = gsub("_II_", "_2-", cyt_combn),
    cyt_combn = gsub("^gp", "g+", cyt_combn),
    cyt_combn = gsub("^g_", "g-", cyt_combn)
  )
```

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    response = as.numeric(response)
  )
```

Now we sum over IL17:

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  UtilsCytoRSV::sum_over_markers(
    grp = c("ptid", "prid", "vaccine", "sex", "infxn", "timepoint", "subset", "cyt_combn"),
    cmbn = "cyt_combn",
    markers_to_sum = c("17", "22"),
    resp = "response"
  )
```



## H56

This is for protocol `C-035-456`.

```{r}
h56_tbl_raw_cd4 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "161115_All H56-035 data.xlsx"
  ),
  sheet = "CD4 Counts"
)
# to merge, we need to get the:
# - denominator count (CD4+) for each cytokine combination
# - numerator counts (only the cytokine combinations)
grp_vec_h56 <- c(
  "Group", "LTBI", "PTID", "Stimulation", "Study Day", "Vaccine/Placebo",
  "Dose", "Regimen (#injections)"
)
h56_tbl_pre_merge_cd4 <- h56_tbl_raw_cd4 |>
  tidyr::pivot_longer(
    -c(Group:`Regimen (#injections)`),
    names_to = "type",
    values_to = "response"
  ) |>
  dplyr::mutate(
    subset = "cd4"
  ) |>
  dplyr::group_by(dplyr::across(grp_vec_h56)) |>
  dplyr::mutate(
    count_denom = response[type == "CD4+"]
  ) |>
  dplyr::ungroup() |>
  dplyr::filter(
    grepl("^g", type)
  ) |>
  dplyr::mutate(
    response = response / count_denom * 1e2
  ) |>
  dplyr::select(-count_denom)
h56_tbl_raw_cd8 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "161115_All H56-035 data.xlsx"
  ),
  sheet = "CD8 Counts"
)
h56_tbl_pre_merge_cd8 <- h56_tbl_raw_cd8 |>
  tidyr::pivot_longer(
    -c(Group:`Regimen (#injections)`),
    names_to = "type",
    values_to = "response"
  ) |>
  dplyr::mutate(
    subset = "cd8"
  ) |>
  dplyr::group_by(dplyr::across(grp_vec_h56)) |>
  dplyr::mutate(
    count_denom = response[type == "CD8+"]
  ) |>
  dplyr::ungroup() |>
  dplyr::filter(
    grepl("^g", type)
  ) |>
  dplyr::mutate(
    response = response / count_denom * 1e2
  ) |>
  dplyr::select(-count_denom)

h56_tbl_cd48 <- h56_tbl_pre_merge_cd4 |>
  dplyr::bind_rows(
    h56_tbl_pre_merge_cd8
  ) |>
  dplyr::select(Group:`Regimen (#injections)`, subset, type, response, everything()) |>
  dplyr::rename(cyt_combn = type)
```

Okay, the grouping information is a bit complicated. Overall, we want:

- those given 5 micrograms twice
- 15 uninfected and 12 infected

So, that is:

- group 1 with `Dose` 5 for uninfected
- group 3 (removing the Placebo entries)

Here we go:

```{r}
h56_tbl_uninf <- h56_tbl_cd48 |>
  dplyr::filter(
    Group == 1, Dose == 5, `Vaccine/Placebo` == "vaccine"
  )
h56_tbl_uninf_pid <- h56_tbl_uninf |>
  dplyr::group_by(PTID) |>
  dplyr::slice(1) |>
  dplyr::select(PTID) |>
  dplyr::ungroup() |>
  dplyr::mutate(PTID = tolower(PTID)) |>
  dplyr::rename(ptid = PTID)
h56_tbl_uninf_pid
```

```{r}
h56_tbl_inf <- h56_tbl_cd48 |>
  dplyr::filter(
    Group == 3, `Vaccine/Placebo` == "vaccine"
  )
h56_tbl_inf_pid <- h56_tbl_inf |>
  dplyr::group_by(PTID) |>
  dplyr::slice(1) |>
  dplyr::select(PTID) |>
  dplyr::ungroup() |>
  dplyr::mutate(PTID = tolower(PTID)) |>
  dplyr::rename(ptid = PTID) 
h56_tbl_inf_pid
```

These are correct, so we'll merge them and save them.


Now, let's merge these with the sex data.

```{r}
data_tidy_sex_c035_456$ptid |> unique()
```

```{r}
# h56_tbl_non_sex_merge <-
h56_tbl_raw_wide <- h56_tbl_cd48 |>
  dplyr::rename(ptid = PTID) |>
  dplyr::mutate(ptid = tolower(ptid)) |>
  dplyr::select(-Group) |>
  dplyr::rename(
    infxn = LTBI
  ) |>
  dplyr::mutate(
    infxn = ifelse(infxn == "pos", "infected", "uninfected")
  ) |>
  dplyr::rename(
    stim = Stimulation
  ) |>
  dplyr::mutate(
    stim = tolower(stim)
  ) |>
  dplyr::filter(
    stim != "pha"
  ) |>
  dplyr::rename(
    timepoint = `Study Day`
  ) |>
  dplyr::mutate(
    timepoint = as.numeric(timepoint)
  ) |>
  dplyr::filter(
    `Vaccine/Placebo` == "vaccine"
  ) |>
  dplyr::select(
    -`Vaccine/Placebo`
  )
h56_tbl_tmp <- h56_tbl_raw_wide |>
  dplyr::mutate(
    cyt_combn = tolower(cyt_combn),
    cyt_combn = .cyt_combn_reorder(
      cyt_combn, c("g", "2", "t", "17")
    ) # ,
    # cyt_combn = names(cyt_combn)
  ) |>
  dplyr::group_by(
    ptid, infxn, timepoint, subset, cyt_combn
  )
# seems to be no unstim for id_03008 or id_03019 at D14, so we exclude these:
h56_tbl_tmp <- h56_tbl_tmp |>
  dplyr::filter(
    !(ptid == "id_03019" & timepoint == 14),
    !(ptid == "id_03008" & timepoint == 14)
  )
h56_tbl_non_sex_merge <- h56_tbl_tmp |>
  dplyr::summarise(
    response_stim = sum(response[stim %in% c("esat6", "ag85b", "rv2660")]),
    response_uns = response[stim == "uns"],
    .groups = "drop"
  ) |>
  dplyr::mutate(
    response = response_stim - 3 * response_uns
  ) |>
  dplyr::mutate(
    stim = "esat6 + ag85b + rv2660"
  ) |>
  dplyr::select(
    -c(response_stim, response_uns)
  ) |>
  dplyr::select(
    ptid, infxn, timepoint, stim, subset, cyt_combn, response, everything()
  ) |>
  dplyr::select(-stim)

data_tidy_h56 <- h56_tbl_non_sex_merge |>
  dplyr::right_join(
    data_tidy_sex_c035_456 |>
      # dplyr::mutate(ptid = tolower(ptid)) |>
      dplyr::select(ptid, sex),
    by = "ptid"
  ) |>
  dplyr::mutate(
    vaccine = "h56", prid = "c-035-456"
  ) |>
  dplyr::select(
    vaccine, prid, everything()
  )
data_tidy_h56 <- data_tidy_h56 |>
  UtilsCytoRSV::sum_over_markers(
    grp = c("ptid", "prid", "vaccine", "sex", "infxn", "timepoint", "subset"),
    cmbn = "cyt_combn",
    markers_to_sum = c("17"),
    resp = "response"
  )
```

There are no entries with missing sex data:

```{r}
data_tidy_h56 |>
  dplyr::filter(!sex %in% c("male", "female"))
```

```{r}
UtilsDataRSV::view_cols(data_tidy_h56)
```

There is one individual with missing CD8 T cell data, for some reason:

```{r}
data_tidy_h56 |>
  dplyr::filter(is.na(response))
```

I think we just remove them.

```{r}
data_tidy_h56 <- data_tidy_h56 |>
  dplyr::filter(
    !is.na(response)
  )
```

```{r}
set.seed(21)
data_tidy_h56 <- data_tidy_h56 |>
  dplyr::mutate(
    ptid = .anonymise(ptid, "h56", "c-035-456")
  ) |>
  dplyr::filter(
    cyt_combn != "g-2-t-"
  )
```

# H1

## Bool/Total sheets

This is for protocol `THYB-04`.

```{r}
h1_tbl_bool <- readr::read_delim(
  projr::projr_path_get("data-raw-private", "H1 THYB04-Cyto Boolean Freq_Merged.txt"), delim = "\t"
)
h1_tbl_bool_pid <- h1_tbl_bool |>
  dplyr::group_by(SubjectID) |>
  dplyr::slice(1) |>
  dplyr::select(SubjectID) |>
  dplyr::ungroup()
h1_tbl_bool_sample <- h1_tbl_bool |>
  dplyr::group_by(SubjectID, `$FIL`, Sample) |>
  dplyr::slice(1) |>
  dplyr::select(SubjectID, `$FIL`) |>
  dplyr::ungroup()

h1_tbl_total <- readr::read_delim(
  projr::projr_path_get("data-raw-private", "H1 THYB04-Total Cytok Freq_Merged.txt"), delim = "\t"
)
h1_tbl_total_pid <- h1_tbl_total |>
  dplyr::group_by(SubjectID) |>
  dplyr::slice(1) |>
  dplyr::select(SubjectID) |>
  dplyr::ungroup()
h1_tbl_total_pid
```

There are 227 here, but this seems excessive, as we only want 58 (34 uninfected and 24 infected).

## Main

This is for protocol `THYB-04`.

```{r}
h1_tbl_main <- main_tbl |>
  dplyr::filter(`Protocol ID` == "THYB-04")
h1_tbl_main_pid <- h1_tbl_main |>
  dplyr::group_by(PatientID) |>
  dplyr::slice(1) |>
  dplyr::select(PatientID) |>
  dplyr::ungroup()
h1_tbl_main_pid
```

## H1.Data.Stat.2015.04.14FL.xlsx sheet

So, here we also have too many donor IDs - 218.
However, we now have group information.

So, as per the paper we had individuals who were vaccinated twice and who received the 15microgram dose.
There are 60 of them who started and 59 of them who completed,
as per the original paper.

Here, we only have information for 56 pids, however, from group 1:

```{r}
h1_tbl_fl <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "H1.Data.Stat.2015.04.14FL.xlsx"
  )
)
h1_tbl_fl_pid <- h1_tbl_fl |>
  dplyr::filter(
    grepl("^Group 1", Group)
  ) |>
  dplyr::group_by(`Donor.ID`) |>
  dplyr::slice(1) |>
  dplyr::select(`Donor.ID`) |>
  dplyr::ungroup()
h1_tbl_fl_pid
```

## Resolving H1

So, as per the paper we had individuals who were vaccinated twice and who received the 15microgram dose.
There are 60 of them who started and 59 of them who completed,
as per the original paper.

From the `main_tbl` sheet, we have 58 donor IDs, which corresponds to how many were used in the 2019 paper (as per what the paper says, )

In the `FL.xlsx` sheet, we have only 56 donor IDs.
They are also prefixed by `ID0...` to have constant length.
Let's check if they match otherwise.

```{r}
h1_vec_fl <- gsub("^ID", "", h1_tbl_fl_pid$`Donor.ID`) |>
  as.numeric() |>
  unique()
h1_vec_main <- h1_tbl_main_pid$PatientID |>
  as.numeric()
```

There seem to be mismatches between the two groups, that go deeper than just the FL sheet having two fewer entries.

The `main` sheet has the following four entries extra:

```{r}
setdiff(h1_vec_main, h1_vec_fl)
```

If we see where the match up in the `FL` sheet, none of them appear in the `FL` spreadsheet:

```{r}
h1_tbl_fl |>
  dplyr::filter(
    `Donor.ID` %in%
    c("ID0221", "ID0225", "ID0229", "ID0037")
  )
```

These two IDs appear in the `FL` spreadsheet but not the main spreadsheet:

```{r}
setdiff(h1_vec_fl, h1_vec_main)
```

Now, we can compare to the first H1 spreadsheet:

```{r}
h1_vec_bool <- h1_tbl_bool_pid$SubjectID
h1_vec_total <- h1_tbl_total_pid$SubjectID
identical(h1_vec_bool |> sort(), h1_vec_total |> sort())
```

Both result in exactly the same PIDs, so we use just the one.

Now, comparing `FL` and `main` to `bool`, we see that `FL` has the same two extra over `bool` and that `main` and `bool` are identical:

```{r}
setdiff(h1_vec_fl, h1_vec_bool)
setdiff(h1_vec_main, h1_vec_bool)
```

Now we can compare to the processed data used in the paper:

```{r}
load("_data_raw/public/check/tmaxSub17ExcTbl.rda")
data_check <- tmaxSub17ExcTbl
data_check_vec <- data_check |>
  dplyr::filter(grepl("^h1", ptid)) |>
  dplyr::pull(ptid) |>
  unique()
data_check_vec <- gsub("^h1_", "", data_check_vec) |>
  as.numeric() |>
  unique()
```

Comparing, we see that they have completely different entries, indicating that the processed data was appropriately anonymised:

```{r}
setdiff(data_check_vec, h1_vec_main)
setdiff(h1_vec_main, data_check_vec)
```

However, we see that both the processed data and the h1 data are the same length.

Okay, so I think we take the PIDs from the `main` spreadsheet as correct, based on the following:

- It matches perfectly with the `Bool`/`Total` spreadsheets.
- It has the same number as both the paper itself and the processed data.
- The `FL` datasheet largely confirms it, as it does have grouping information (group 1, two doses of 15 micrograms).
  - It does, however, not match exactly. It is possible, however, that it was manually edited, thus inducing mistakes. It is not clear why the numbers are slightly different, however - perhaps not all samples were processed by then, seeing as it was 2015?

I'll send Humphrey the data with the IDs as the numbers and the IDs made to have length six.

```{r}
h1_tbl_final <- tibble::tibble(pid = h1_vec_main)
pid_long_vec <- vapply(h1_tbl_final$pid, function(x) {
  n_rep <- 4 - nchar(x)
  zero_chr <- rep(0, n_rep) |> paste0(collapse = "")
  paste0("ID", zero_chr, x)
}, character(1))
h1_tbl_final <- h1_tbl_final |>
  dplyr::mutate(
    pid_long = pid_long_vec
  )
h1_tbl_final
```

```{r}
data_tidy_sex_h1$pid |> unique() |> sort()
data_tidy_sex_h1$pid_long |> unique() |> sort()
```

```{r}
h1_tbl_final$pid |> unique() |> sort()
h1_tbl_final$pid_long |> unique() |> sort()
```

We'll merge on `pid`, and check that the leading zeroes don't cause problems.


There are no entries with missing sex data:

```{r}
h1_tbl_bool_join <- h1_tbl_bool |>
  dplyr::rename(
    ptid = SubjectID
  ) |>
  dplyr::mutate(
    ptid = as.character(ptid)
  ) |>
  # remove entries from groups we're
  # not interested in
  dplyr::filter(
    ptid %in% h1_tbl_final$pid
  ) |>
  dplyr::select(
    -c(Sample, `$FIL`)
  ) |>
  dplyr::rename(
    infxn = QFT,
    stim = `TUBE NAME`
  ) |>
  dplyr::mutate(
    stim = tolower(stim),
    Timepoint = gsub("^day ", "", Timepoint |> tolower()) |>
      as.numeric()
  ) |>
  dplyr::rename(
    timepoint = Timepoint,
    subset = Subset
  ) |>
  dplyr::mutate(
    prid = "thyb04",
    vaccine = "h1"
  )
h1_tbl_sex_join <- data_tidy_sex_h1 |>
  dplyr::rename(ptid = pid) |>
  dplyr::mutate(ptid = gsub("^0+", "", ptid)) |>
  dplyr::select(ptid, sex)

data_tidy_h1_unanon_wide <- h1_tbl_bool_join |>
  dplyr::left_join(
    h1_tbl_sex_join,
    by = "ptid"
  )

data_tidy_h1_unanon_wide <- data_tidy_h1_unanon_wide |>
  dplyr::mutate(
    subset = tolower(subset)
  ) |>
  dplyr::mutate(
    infxn = ifelse(infxn == "2", "infected", "uninfected")
  )

data_tidy_h1_unanon_wide <- data_tidy_h1_unanon_wide |>
  dplyr::select(
    vaccine, prid, ptid, sex, infxn, timepoint, stim, subset, everything()
  )
data_tidy_h1_unanon <- data_tidy_h1_unanon_wide |>
  tidyr::pivot_longer(
    -c(vaccine:subset),
    names_to = "cyt_combn",
    values_to = "response"
  ) |>
  dplyr::mutate(
    cyt_combn = tolower(cyt_combn),
    cyt_combn = .cyt_combn_reorder(
      cyt_combn, c("g", "2", "t", "17")
    )# ,
    #cyt_combn = names(cyt_combn),
    # cyt_combn = .cyt_combn_reorder(
    #   cyt_combn, c("g", "2", "t", "17")
    # )
  )
data_tidy_h1_unanon <- data_tidy_h1_unanon |>
  # dplyr::mutate(
  #   cyt_combn = names(cyt_combn)
  # ) |>
  dplyr::filter(!grepl("pha", stim)) |>
  dplyr::filter(!cyt_combn == "g-2-t-")
```

No missing sex data:

```{r}
data_tidy_h1_unanon |>
  dplyr::filter(!sex %in% c("male", "female"))
```

I would defer summing over stims, but we've already done that for other ones, so we might as well now.

```{r}
data_tidy_h1_unanon_calc <- data_tidy_h1_unanon |>
  dplyr::group_by(
    vaccine, prid, ptid, sex, infxn, timepoint, subset, cyt_combn
  ) |>
  dplyr::summarise(
    response_stim = sum(response[stim %in% c("esat6", "ag85b")]),
    response_uns = response[stim == "uns"],
    .groups = "drop"
  ) |>
  dplyr::mutate(
    response = response_stim - 2 * response_uns
  ) |>
  dplyr::select(
    -c(response_stim, response_uns)
  )
```

Sum over IL17:

```{r}
data_tidy_h1_unanon_calc <- data_tidy_h1_unanon_calc |>
  UtilsCytoRSV::sum_over_markers(
    grp = c("ptid", "prid", "vaccine", "sex", "infxn", "timepoint", "subset"),
    cmbn = "cyt_combn",
    markers_to_sum = c("17"),
    resp = "response"
  )
```

```{r}
UtilsDataRSV::view_cols(data_tidy_h1_unanon_calc)
```

```{r}
set.seed(45)
data_tidy_h1 <- data_tidy_h1_unanon_calc |>
  dplyr::mutate(
    ptid = .anonymise(ptid, .data$vaccine, .data$prid)
  ) |>
  dplyr::ungroup() |>
  dplyr::mutate(
    subset = gsub("\\+|\\-", "", subset)
  ) |>
  dplyr::filter(
    cyt_combn != "g-2-t-"
  )
```

# 040

```{r}
data_raw_bcg_040 <- readxl::read_xlsx(
  projr::projr_path_get(
    "data-raw-private", "MergedDemoImmu29042024Copy.xlsx"
  )
)
```

```{r}
data_tidy_bcg_040 <- data_raw_bcg_040 |>
  dplyr::mutate(
    across(where(is.character), tolower)
  )
colnames(data_tidy_bcg_040) <- tolower(
  colnames(data_tidy_bcg_040)
)
colnames(data_tidy_bcg_040)[
   which(colnames(data_tidy_bcg_040) == "arm")[2]
] <- "arm_2"
```

```{r}
data_tidy_bcg_040 |>
  dplyr::select(
    subjid, group, arm, arm_2, sex, timepoint, stim, cellsubset, datatype
  ) |>
  UtilsDataRSV::view_cols()
```

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::rename(
    ptid = subjid
  ) |>
  dplyr::filter(
    arm_2 == "bcg"
  ) |>
  dplyr::filter(
    stim == "bcg"
    ) |>
  dplyr::filter(
    cellsubset %in% c("cd4", "cd8")
  )
```

```{r}
data_tidy_bcg_040 |>
  dplyr::select(
    ptid:datatype
  ) |>
  UtilsDataRSV::view_cols()
```

```{r}
colnames(data_tidy_bcg_040)
```

Let's remove unnecessary columns:
```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::select(
    -c(
      race, school, arm, arm_2, 
      fisherclassification,
       age, dob, randdate, group, datatype,
      fisherpvalue:classificationfisher,
      starts_with("mg_"),
      totalcytokine:pfs
      )
  ) |>
  dplyr::mutate(
    vaccine = "bcg",
    prid = "040",
    infxn = "uninfected"
  ) |>
  dplyr::rename(
    subset = cellsubset
  ) |>
  dplyr::select(
    vaccine, prid, ptid, sex, infxn, timepoint, stim, subset, everything()
  )
```

Now we process the immune response data.

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  tidyr::pivot_longer(
    -c(vaccine:subset),
    names_to = "cyt_combn",
    values_to = "response"
  )
```

```{r}
# gpiip17p22ptp
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    cyt_combn = tolower(cyt_combn)
  ) |>
  dplyr::mutate(
    cyt_combn = gsub("ptp$", "pt+", cyt_combn),
    cyt_combn = gsub("_tp$", "_t+", cyt_combn),
    cyt_combn = gsub("pt_$", "pt-", cyt_combn),
    cyt_combn = gsub("_t_$", "_t-", cyt_combn),
    cyt_combn = gsub("p22p", "p22+", cyt_combn),
    cyt_combn = gsub("p22_", "p22-", cyt_combn),
    cyt_combn = gsub("_22p", "_22+", cyt_combn),
    cyt_combn = gsub("_22_", "_22-", cyt_combn),
    cyt_combn = gsub("p17p", "p17+", cyt_combn),
    cyt_combn = gsub("p17_", "p17-", cyt_combn),
    cyt_combn = gsub("_17p", "_17+", cyt_combn),
    cyt_combn = gsub("_17_", "_17-", cyt_combn),
    cyt_combn = gsub("piip", "p2+", cyt_combn),
    cyt_combn = gsub("_iip", "_2+", cyt_combn),
    cyt_combn = gsub("pii_", "p2-", cyt_combn),
    cyt_combn = gsub("_ii_", "_2-", cyt_combn),
    cyt_combn = gsub("^gp", "g+", cyt_combn),
    cyt_combn = gsub("^g_", "g-", cyt_combn)
  )
```

Now we sum over 17 and 22:

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    response = as.numeric(response)
  ) |>
  UtilsCytoRSV::sum_over_markers(
    grp = c("ptid", "prid", "vaccine", "sex", "infxn", "timepoint", "stim", "subset"),
    cmbn = "cyt_combn",
    markers_to_sum = c("17", "22"),
    resp = "response"
  )
```

Now we anonymise again.

```{r}
set.seed(23432)
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    ptid = .anonymise(ptid, "bcg", "040")
  )
```

Okay, the timepoint needs to be formatted correctly:

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::mutate(
    timepoint = gsub("^d", "", timepoint) |> as.numeric()
  )
```

We also don't want the stim column:

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::select(-stim)
```

We also don't want the all-negative one:

```{r}
data_tidy_bcg_040 <- data_tidy_bcg_040 |>
  dplyr::filter(
    cyt_combn != "g-2-t-"
  )
```

# MTBVAC 050

```{r}
data_raw_mtbvac_050 <- readr::read_csv(
  projr::projr_path_get(
    "data-raw-private", "MTBVAC_FINAL.RAW.DF.csv"
  )
)
```

Let's have a look at the data:

```{r}
UtilsDataRSV::view_cols(
  data_raw_mtbvac_050
)
```

Let's remove the columns we don't care about:

```{r}
data_tidy_mtbvac_050 <- data_raw_mtbvac_050 |>
  dplyr::select(
    -c(sample.id, `X`, `...1`, `xml.freq`, `openCyto.count`,
    `xml.count`, `plot.folder`, `COLLECTION DATE`,
    `ACQUISITION DATE`)
  )
```

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::mutate(
    vaccine = "mtbvac",
    prid = "050"
  ) |>
  dplyr::select(
    vaccine, prid, everything()
  ) |>
  dplyr::rename(
    cohort = COHORT,
    response = `openCyto.freq`,
    ptid = `Donor.ID`
  ) |>
  dplyr::select(-pid) |>
  dplyr::rename(
    stim = stimulation
  ) |>
  dplyr::mutate(
    stim = tolower(stim)
  ) |>
  dplyr::rename(
    timepoint = `Study.day`
  ) |>
  dplyr::select(
    vaccine, prid, cohort,
    ptid, timepoint, stim, node, response,
    everything()
  )
```

Okay, let's make this faster and filter on the nodes we need up front:
```{r}
data_tidy_mtbvac_050$node |>
  unique() |>
  sort()
```

Let's take all entires begining with `cd8.gate:` and `cd4.gate:`, that seems correct:

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::filter(
    grepl("^cd8\\.gate\\:|^cd4\\.gate\\:", node)
  )
```

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::mutate(
    subset = ifelse(
      grepl("^cd8", node),
      "cd8",
      "cd4"
    )
  ) |>
  dplyr::select(vaccine:stim, subset, node, response, everything())
```

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::mutate(
    node = gsub("cd8\\.gate\\:|cd4\\.gate\\:", "", node)
  )
```

```{r}
# IFNG&IL2&TNF&IL22&IL17
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::mutate(
    node = gsub("^IFNG&", "g+&", node),
    node = gsub("^!IFNG&", "g-&", node),
    node = gsub("&IL2&", "2+&", node),
    node = gsub("&!IL2&", "2-&", node),
    node = gsub("&TNF&", "t+&", node),
    node = gsub("&!TNF&", "t-&", node),
    node = gsub("&IL22&", "22+&", node),
    node = gsub("&!IL22&", "22-&", node),
    node = gsub("&IL17", "17+", node),
    node = gsub("&!IL17", "17-", node)
  )
```

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  UtilsCytoRSV::sum_over_markers(
    grp = c("ptid", "prid", "vaccine", "cohort", "timepoint", "stim", "subset"),
    cmbn = "node",
    markers_to_sum = c("22", "17"),
    resp = "response"
  )
```

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::filter(
    stim %in% c("uns", "mtbvac")
  )
```

Some people don't have any unstim measurements:

```{r}
uns_tbl_filter <- data_tidy_mtbvac_050 |>
  dplyr::group_by(
    vaccine, prid, cohort, ptid, timepoint, subset,
    node
  ) |>
  dplyr::filter(
    sum(stim == "uns") == 0L
    ) |>
  dplyr::ungroup() |>
  dplyr::group_by(
    vaccine, prid, cohort, ptid, timepoint
  )
uns_tbl_filter
```

We'll exclude them:

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::anti_join(
    uns_tbl_filter |>
      dplyr::select(ptid, timepoint),
    by = c("ptid", "timepoint")
  )
```

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  UtilsCytoRSV::subtract_background(
    grp = c(
      "vaccine", "prid", "cohort", "ptid",
      "timepoint", "subset", "node"
    ),
    uns = "uns",
    stim = "stim",
    resp = "response"
  )
```

Let's remove the stim column now:

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::select(-stim)
```

Let's rename node to `cyt_combn`:

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::rename(
    cyt_combn = node
  )
```

So, I need to:

- Choose the correct cohort
- get the sex data
- add the infxn column (based on cohort)

```{r}
data_tidy_mtbvac_050 <- data_tidy_mtbvac_050 |>
  dplyr::filter(
    cohort %in% c(3:4, 7:8)
  ) |>
  dplyr::mutate(
    infxn = ifelse(cohort %in% 3:4, "uninfected", "infected")
  ) |>
  dplyr::select(-cohort) |>
  dplyr::select(vaccine, prid, ptid, infxn, timepoint, subset, cyt_combn, response)
```

Let's get out table of pids for Humphrey:

```{r}
#| eval: false
data_tidy_mtbvac_050_pid <- data_tidy_mtbvac_050 |>
  dplyr::select(ptid) |>
  dplyr::group_by(ptid) |>
  dplyr::slice(1)
readr::write_csv(
  data_tidy_mtbvac_050_pid,
  projr::projr_path_get("cache", "mtbvac_050_pids.csv")
)
```

# Joining

```{r}
data_tidy_vacc_freq <- dplyr::bind_rows(
  data_tidy_mva85a_tb008,
  data_tidy_mva85a_tb011,
  data_tidy_h56,
  data_tidy_h1,
  data_tidy_bcg_040
)
```

```{r}
UtilsDataRSV::view_cols(data_tidy_vacc_freq)
```

```{r}
projr::projr_use_data(data_tidy_vacc_freq, overwrite = TRUE)
```

```{r}
data_tidy_vacc_freq |>
  dplyr::filter(
    vaccine != "h56"
  ) |>
  dplyr::group_by(
    vaccine, prid, infxn, sex, ptid
  ) |>
  dplyr::slice(1) |>
  dplyr::ungroup() |>
  dplyr::group_by(
    vaccine, prid, infxn, sex
  ) |>
  dplyr::summarise(
    count = dplyr::n()
  )
```


